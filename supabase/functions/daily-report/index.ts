// supabase/functions/daily-report/index.ts
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.0.0";

serve(async (_req) => {
  try {
    const supabaseClient = createClient(
      Deno.env.get("SUPABASE_URL") ?? "",
      Deno.env.get("SUPABASE_SERVICE_ROLE_KEY") ?? ""
    );

    // 1. Get all companies
    const { data: companies } = await supabaseClient.from("companies").select("id, name");

    for (const company of companies || []) {
      // 2. Get admins for the company
      const { data: admins } = await supabaseClient
        .from("company_members")
        .select(`
          profiles!inner(
            id,
            full_name,
            auth.users!inner(email)
          )
        `)
        .eq("company_id", company.id)
        .eq("role", "admin");
      
      const adminEmails = admins?.map(a => a.profiles?.auth?.users?.email).filter(Boolean) || [];
      if (adminEmails.length === 0) continue;

      // 3. Calculate yesterday's payroll
      const yesterdayStart = new Date();
      yesterdayStart.setDate(yesterdayStart.getDate() - 1);
      yesterdayStart.setHours(0, 0, 0, 0);

      const yesterdayEnd = new Date();
      yesterdayEnd.setDate(yesterdayEnd.getDate() - 1);
      yesterdayEnd.setHours(23, 59, 59, 999);

      const { data: reportData } = await supabaseClient.rpc("calculate_payroll_for_period", {
          p_company_id: company.id,
          p_start_date: yesterdayStart.toISOString(),
          p_end_date: yesterdayEnd.toISOString(),
        });

      const { data: summaryData } = await supabaseClient.rpc("get_daily_summary", {
          p_company_id: company.id,
          p_date: yesterdayStart.toISOString().split('T')[0]
        });

      // 4. Format and send email using Resend
      const totalHours = summaryData?.[0]?.total_hours || 0;
      const totalCost = summaryData?.[0]?.total_cost || 0;
      const staffCount = summaryData?.[0]?.staff_count || 0;
      const jobsWorked = summaryData?.[0]?.jobs_worked || [];

      const emailHtml = `
        <h1>Daily Report for ${company.name}</h1>
        <h2>${yesterdayStart.toDateString()}</h2>
        
        <h3>Summary</h3>
        <ul>
          <li><strong>Total Hours:</strong> ${totalHours}</li>
          <li><strong>Total Labor Cost:</strong> $${totalCost}</li>
          <li><strong>Staff Members:</strong> ${staffCount}</li>
          <li><strong>Jobs Worked:</strong> ${jobsWorked.join(', ')}</li>
        </ul>

        <h3>Staff Breakdown</h3>
        <table border="1" style="border-collapse: collapse; width: 100%;">
          <tr>
            <th>Staff Member</th>
            <th>Hours</th>
            <th>Pay Rate</th>
            <th>Total Wage</th>
          </tr>
          ${reportData?.map((staff: any) => `
            <tr>
              <td>${staff.full_name}</td>
              <td>${staff.total_hours}</td>
              <td>$${staff.pay_rate}</td>
              <td>$${staff.total_wage}</td>
            </tr>
          `).join('') || '<tr><td colspan="4">No hours logged</td></tr>'}
        </table>

        <p>Generated by Streamline Workforce Management</p>
      `;
      
      await fetch("https://api.resend.com/emails", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${Deno.env.get("RESEND_API_KEY")}`,
        },
        body: JSON.stringify({
          from: "reports@streamline.app",
          to: adminEmails,
          subject: `Streamline Daily Report: ${yesterdayStart.toDateString()}`,
          html: emailHtml,
        }),
      });
    }

    return new Response("Reports sent successfully", { status: 200 });
  } catch (error) {
    console.error("Error generating daily reports:", error);
    return new Response(`Error: ${error.message}`, { status: 500 });
  }
});

